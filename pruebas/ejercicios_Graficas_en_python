import numpy as np
import matplotlib.pyplot as plt

# Función para el método de Gauss-Seidel
def gauss_seidel(A, b, x0, tol=1e-6, max_iter=100):
    n = len(A)  # Número de ecuaciones
    x = x0.copy()  # Copia del vector inicial

    for _ in range(max_iter):
        x_new = np.zeros_like(x)  # Nuevo vector para almacenar los resultados de cada iteración
        for i in range(n):
            # Cálculo del nuevo valor de x[i]
            x_new[i] = (b[i] - np.dot(A[i, :i], x_new[:i]) - np.dot(A[i, i+1:], x[i+1:])) / A[i, i]
        
        # Verificación de la convergencia
        if np.linalg.norm(x_new - x) < tol:
            break
        
        x = x_new  # Actualización del vector x
    
    return x

# Función para el método de la potencia
def power_method(A, x0, tol=1e-6, max_iter=100):
    n = len(A)  # Número de ecuaciones
    x = x0.copy()  # Copia del vector inicial
    x_new = np.zeros_like(x)
    eig_val = 0  # Inicialización del valor propio

    for _ in range(max_iter):
        x_new = np.dot(A, x)  # Multiplicación de la matriz por el vector
        eig_val = np.dot(x.T, np.dot(A, x)) / np.dot(x.T, x)  # Cálculo del valor propio dominante
        x_new = x_new / np.linalg.norm(x_new)  # Normalización del vector

        # Verificación de la convergencia
        if np.linalg.norm(x_new - x) < tol:
            break

        x = x_new  # Actualización del vector x

    return x, eig_val  # Devolución del vector y el valor propio

# Definición de la matriz A y el vector b
A = np.array([[1, 2, 2],
              [4, 5, 6],
              [7, 8, 10]])
b = np.array([6, 25, -11])
x0 = np.array([1, 1, 1])  # Vector inicial

# Llamada a la función Gauss-Seidel
solucion_gs = gauss_seidel(A, b, x0)
print("Solución usando el método de Gauss-Seidel:", solucion_gs)

# Llamada a la función del método de la potencia
eigenvector, eigenvalue = power_method(A, x0)
print("\nValor propio dominante usando el método de la potencia:", eigenvalue)
print("Vector propio dominante usando el método de la potencia:", eigenvector)

# Cálculo del número de condición de la matriz A
cond_num = np.linalg.cond(A)
print("\nNúmero de condición de la matriz A:", cond_num)

# Creación de la figura 2D
plt.figure()

# Coordenadas de los puntos
x_coords = np.arange(len(solucion_gs))
y_coords = solucion_gs

# Generar el gráfico de línea
plt.plot(x_coords, y_coords, marker='o')

# Etiquetas de los ejes
plt.xlabel('Variable')
plt.ylabel('Valor')
plt.title('Solución usando el método de Gauss-Seidel')

# Mostrar el gráfico
plt.show()