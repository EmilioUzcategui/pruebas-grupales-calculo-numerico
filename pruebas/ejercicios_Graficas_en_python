#primer ejecicio con grafica
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def gauss_seidel(A, b, x0, tol=1e-6, max_iter=100):
    n = len(A)
    x = x0.copy()
    
    for _ in range(max_iter):
        x_new = np.zeros_like(x)
        for i in range(n):
            x_new[i] = (b[i] - np.dot(A[i, :i], x_new[:i]) - np.dot(A[i, i+1:], x[i+1:])) / A[i, i]
        
        if np.linalg.norm(x_new - x) < tol:
            break
        
        x = x_new
    
    return x

A = np.array([[10, -1, 2],
              [-1, 11, -1],
              [2, -1, 10]])
b = np.array([6, 25, -11])
x0 = np.array([0, 0, 0])

solucion = gauss_seidel(A, b, x0)
print("Solución usando el método de Gauss-Seidel:", solucion)

# Crear la figura 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Coordenadas de los puntos
x_coords = np.array([0, 1, 2])
y_coords = np.array(solucion)

# Generar las barras
ax.bar(x_coords, y_coords, zs=0, zdir='y', alpha=0.8)

# Etiquetas de los ejes
ax.set_xlabel('Variable')
ax.set_ylabel('Valor')
ax.set_zlabel('')

# Título del gráfico
plt.title('Solución usando el método de Gauss-Seidel')

plt.show()


# Metodo de potencia:

def metodoPotencia(A, v):
    landa = 0
    x0 = x1 = v
    for i in range(7):
        x0 = x1
        x1 = np.dot(A, x0)
        for j in range(len(x0)):
            if x0[j] == 0:
                break
            elif x0[j] != 0:
                landa = x1[0] / x0[j]
                break
    
    vr = x1/abs(x1)
    for i in range(len(vr)):
        vr[i] = np.ceil(vr[i])
    
    return vr*np.ceil(landa)
    
def plot_points(points):
    fig = plt.figure()
    
    ax = fig.add_subplot(111, projection='3d')
    x = [points[0]]
    y = [points[1]]
    z = [points[2]]
    ax.scatter(x, y, z)
    

    # Mostrar gráfico
    plt.show()

A = np.array([[4, -1, 1], [-1, 3, -2], [1, -2, 3]])
v = np.array([[1], [0], [0]])

plot_points(metodoPotencia(A, v))